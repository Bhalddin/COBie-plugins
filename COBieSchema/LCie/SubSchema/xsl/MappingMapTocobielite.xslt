<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2013r2

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="http://attribute.lcie.cobielite.cobie.erdc.org" xmlns:ns1="http://contact.lcie.cobielite.cobie.erdc.org" xmlns:ns2="http://core.cobielite.cobie.erdc.org" xmlns:ns3="http://typetemplate.lcie.cobielite.cobie.erdc.org" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" exclude-result-prefixes="ns0 ns1 ns3 xs fn">
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var1_Facility" as="node()?" select="ns3:Facility"/>
		<Facility xmlns="http://cobielite.cobie.erdc.org" xmlns:assembly="http://assembly.cobielite.cobie.erdc.org" xmlns:asset="http://asset.cobielite.cobie.erdc.org" xmlns:aty="http://assettype.cobielite.cobie.erdc.org" xmlns:att="http://attribute.cobielite.cobie.erdc.org" xmlns:conn="http://connection.cobielite.cobie.erdc.org" xmlns:con="http://contact.cobielite.cobie.erdc.org" xmlns:doc="http://document.cobielite.cobie.erdc.org" xmlns:fac="http://facility.cobielite.cobie.erdc.org" xmlns:floor="http://floor.cobielite.cobie.erdc.org" xmlns:iss="http://issue.cobielite.cobie.erdc.org" xmlns:job="http://job.cobielite.cobie.erdc.org" xmlns:res="http://resource.cobielite.cobie.erdc.org" xmlns:space="http://space.cobielite.cobie.erdc.org" xmlns:spr="http://spare.cobielite.cobie.erdc.org" xmlns:sys="http://system.cobielite.cobie.erdc.org" xmlns:zone="http://zone.cobielite.cobie.erdc.org">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'http://cobielite.cobie.erdc.org C:/Users/RDITLACB/git/cobieserver/COBieSchema/COBieLite/xsd/cobielite.xsd'"/>
			<xsl:for-each select="$var1_Facility[fn:exists(@ns2:externalEntityName)]">
				<xsl:attribute name="ns2:externalEntityName" select="fn:string(@ns2:externalEntityName)"/>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility[fn:exists(@ns2:externalID)]">
				<xsl:attribute name="ns2:externalID" select="fn:string(@ns2:externalID)"/>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility[fn:exists(@ns2:externalSystemName)]">
				<xsl:attribute name="ns2:externalSystemName" select="fn:string(@ns2:externalSystemName)"/>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<FacilityName xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(ns2:FacilityName)"/>
				</FacilityName>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<FacilityCategory xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(ns2:FacilityCategory)"/>
				</FacilityCategory>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<xsl:variable name="var2_resultof_first" as="node()" select="ns2:ProjectAssignment"/>
				<ProjectAssignment xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="($var2_resultof_first/@node(), $var2_resultof_first/node())"/>
				</ProjectAssignment>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<xsl:variable name="var3_resultof_first" as="node()" select="ns2:SiteAssignment"/>
				<SiteAssignment xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="($var3_resultof_first/@node(), $var3_resultof_first/node())"/>
				</SiteAssignment>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<FacilityDefaultLinearUnit xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(ns2:FacilityDefaultLinearUnit)"/>
				</FacilityDefaultLinearUnit>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<FacilityDefaultAreaUnit xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(ns2:FacilityDefaultAreaUnit)"/>
				</FacilityDefaultAreaUnit>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<FacilityDefaultVolumeUnit xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(ns2:FacilityDefaultVolumeUnit)"/>
				</FacilityDefaultVolumeUnit>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<FacilityDefaultCurrencyUnit xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(ns2:FacilityDefaultCurrencyUnit)"/>
				</FacilityDefaultCurrencyUnit>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<FacilityDefaultMeasurementStandard xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(ns2:FacilityDefaultMeasurementStandard)"/>
				</FacilityDefaultMeasurementStandard>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility/ns2:FacilityDescription">
				<FacilityDescription xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(.)"/>
				</FacilityDescription>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility/ns2:FacilityDeliverablePhaseName">
				<FacilityDeliverablePhaseName xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:sequence select="fn:string(.)"/>
				</FacilityDeliverablePhaseName>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility">
				<AssetTypes xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:for-each select="ns2:AssetTypes/ns3:AssetType">
						<xsl:variable name="var4_externalSystemName" as="node()?" select="@ns2:externalSystemName"/>
						<xsl:variable name="var5_externalEntityName" as="node()?" select="@ns2:externalEntityName"/>
						<xsl:variable name="var6_externalID" as="node()?" select="@ns2:externalID"/>
						<xsl:variable name="var7_resultof_first" as="node()" select="ns2:AssetTypeNominalHeight"/>
						<xsl:variable name="var8_resultof_first" as="node()" select="ns2:AssetTypeNominalWidth"/>
						<xsl:variable name="var9_resultof_first" as="node()" select="ns2:AssetTypeNominalLength"/>
						<aty:AssetType>
							<xsl:if test="fn:exists($var5_externalEntityName)">
								<xsl:attribute name="ns2:externalEntityName" select="fn:string($var5_externalEntityName)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var6_externalID)">
								<xsl:attribute name="ns2:externalID" select="fn:string($var6_externalID)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var4_externalSystemName)">
								<xsl:attribute name="ns2:externalSystemName" select="fn:string($var4_externalSystemName)"/>
							</xsl:if>
							<xsl:for-each select="ns2:AssetTypeName">
								<AssetTypeName>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeName>
							</xsl:for-each>
							<AssetTypeCategory>
								<xsl:sequence select="fn:string(ns2:AssetTypeCategory)"/>
							</AssetTypeCategory>
							<AssetTypeDescription>
								<xsl:sequence select="fn:string(ns2:AssetTypeDescription)"/>
							</AssetTypeDescription>
							<AssetTypeAccountingCategory>
								<xsl:sequence select="fn:string(ns2:AssetTypeAccountingCategory)"/>
							</AssetTypeAccountingCategory>
							<xsl:for-each select="ns2:AssetTypeReplacementCostValue">
								<AssetTypeReplacementCostValue>
									<xsl:sequence select="(./@node(), ./node())"/>
								</AssetTypeReplacementCostValue>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeExpectedLifeValue">
								<AssetTypeExpectedLifeValue>
									<xsl:sequence select="(./@node(), ./node())"/>
								</AssetTypeExpectedLifeValue>
							</xsl:for-each>
							<AssetTypeNominalLength>
								<xsl:sequence select="($var9_resultof_first/@node(), $var9_resultof_first/node())"/>
							</AssetTypeNominalLength>
							<AssetTypeNominalWidth>
								<xsl:sequence select="($var8_resultof_first/@node(), $var8_resultof_first/node())"/>
							</AssetTypeNominalWidth>
							<AssetTypeNominalHeight>
								<xsl:sequence select="($var7_resultof_first/@node(), $var7_resultof_first/node())"/>
							</AssetTypeNominalHeight>
							<xsl:for-each select="ns2:AssetTypeAccessibilityText">
								<AssetTypeAccessibilityText>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeAccessibilityText>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeCodePerformance">
								<AssetTypeCodePerformance>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeCodePerformance>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeColorCode">
								<AssetTypeColorCode>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeColorCode>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeConstituentsDescription">
								<AssetTypeConstituentsDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeConstituentsDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeFeaturesDescription">
								<AssetTypeFeaturesDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeFeaturesDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeFinishDescription">
								<AssetTypeFinishDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeFinishDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeGradeDescription">
								<AssetTypeGradeDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeGradeDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeMaterialDescription">
								<AssetTypeMaterialDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeMaterialDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeShapeDescription">
								<AssetTypeShapeDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeShapeDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeSizeDescription">
								<AssetTypeSizeDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeSizeDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeSustainabilityPerformanceDescription">
								<AssetTypeSustainabilityPerformanceDescription>
									<xsl:sequence select="fn:string(.)"/>
								</AssetTypeSustainabilityPerformanceDescription>
							</xsl:for-each>
							<xsl:for-each select="ns2:AssetTypeAttributes">
								<AssetTypeAttributes>
									<xsl:for-each select="ns0:Attribute">
										<xsl:variable name="var10_propertySetExternalIdentifier" as="node()?" select="@ns2:propertySetExternalIdentifier"/>
										<xsl:variable name="var11_propertySetName" as="node()?" select="@ns2:propertySetName"/>
										<xsl:variable name="var12_externalSystemName" as="node()?" select="@ns2:externalSystemName"/>
										<xsl:variable name="var13_externalEntityName" as="node()?" select="@ns2:externalEntityName"/>
										<xsl:variable name="var14_externalID" as="node()?" select="@ns2:externalID"/>
										<xsl:variable name="var15_resultof_first" as="node()" select="ns2:AttributeValue"/>
										<att:Attribute>
											<xsl:if test="fn:exists($var13_externalEntityName)">
												<xsl:attribute name="ns2:externalEntityName" select="fn:string($var13_externalEntityName)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var14_externalID)">
												<xsl:attribute name="ns2:externalID" select="fn:string($var14_externalID)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var12_externalSystemName)">
												<xsl:attribute name="ns2:externalSystemName" select="fn:string($var12_externalSystemName)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var11_propertySetName)">
												<xsl:attribute name="ns2:propertySetName" select="fn:string($var11_propertySetName)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var10_propertySetExternalIdentifier)">
												<xsl:attribute name="ns2:propertySetExternalIdentifier" select="fn:string($var10_propertySetExternalIdentifier)"/>
											</xsl:if>
											<AttributeName>
												<xsl:sequence select="fn:string(ns2:AttributeName)"/>
											</AttributeName>
											<AttributeCategory>
												<xsl:sequence select="fn:string(ns2:AttributeCategory)"/>
											</AttributeCategory>
											<xsl:for-each select="ns2:AttributeDescription">
												<AttributeDescription>
													<xsl:sequence select="fn:string(.)"/>
												</AttributeDescription>
											</xsl:for-each>
											<AttributeValue>
												<xsl:sequence select="($var15_resultof_first/@node(), $var15_resultof_first/node())"/>
											</AttributeValue>
										</att:Attribute>
									</xsl:for-each>
								</AssetTypeAttributes>
							</xsl:for-each>
						</aty:AssetType>
					</xsl:for-each>
				</AssetTypes>
			</xsl:for-each>
			<xsl:for-each select="$var1_Facility/ns2:Contacts">
				<Contacts xmlns="http://core.cobielite.cobie.erdc.org">
					<xsl:for-each select="ns1:Contact">
						<xsl:variable name="var16_externalSystemName" as="node()?" select="@ns2:externalSystemName"/>
						<xsl:variable name="var17_externalEntityName" as="node()?" select="@ns2:externalEntityName"/>
						<xsl:variable name="var18_externalID" as="node()?" select="@ns2:externalID"/>
						<con:Contact>
							<xsl:if test="fn:exists($var17_externalEntityName)">
								<xsl:attribute name="ns2:externalEntityName" select="fn:string($var17_externalEntityName)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var18_externalID)">
								<xsl:attribute name="ns2:externalID" select="fn:string($var18_externalID)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var16_externalSystemName)">
								<xsl:attribute name="ns2:externalSystemName" select="fn:string($var16_externalSystemName)"/>
							</xsl:if>
							<ContactEmail>
								<xsl:sequence select="fn:string(ns2:ContactEmail)"/>
							</ContactEmail>
							<ContactCategory>
								<xsl:sequence select="fn:string(ns2:ContactCategory)"/>
							</ContactCategory>
							<ContactCompanyName>
								<xsl:sequence select="fn:string(ns2:ContactCompanyName)"/>
							</ContactCompanyName>
							<ContactPhoneNumber>
								<xsl:sequence select="fn:string(ns2:ContactPhoneNumber)"/>
							</ContactPhoneNumber>
							<xsl:for-each select="ns2:ContactDepartmentName">
								<ContactDepartmentName>
									<xsl:sequence select="fn:string(.)"/>
								</ContactDepartmentName>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactGivenName">
								<ContactGivenName>
									<xsl:sequence select="fn:string(.)"/>
								</ContactGivenName>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactFamilyName">
								<ContactFamilyName>
									<xsl:sequence select="fn:string(.)"/>
								</ContactFamilyName>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactStreet">
								<ContactStreet>
									<xsl:sequence select="fn:string(.)"/>
								</ContactStreet>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactPostalBoxNumber">
								<ContactPostalBoxNumber>
									<xsl:sequence select="fn:string(.)"/>
								</ContactPostalBoxNumber>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactTownName">
								<ContactTownName>
									<xsl:sequence select="fn:string(.)"/>
								</ContactTownName>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactRegionCode">
								<ContactRegionCode>
									<xsl:sequence select="fn:string(.)"/>
								</ContactRegionCode>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactCountryName">
								<ContactCountryName>
									<xsl:sequence select="fn:string(.)"/>
								</ContactCountryName>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactPostalCode">
								<ContactPostalCode>
									<xsl:sequence select="fn:string(.)"/>
								</ContactPostalCode>
							</xsl:for-each>
							<xsl:for-each select="ns2:ContactURL">
								<ContactURL>
									<xsl:sequence select="fn:string(.)"/>
								</ContactURL>
							</xsl:for-each>
						</con:Contact>
					</xsl:for-each>
				</Contacts>
			</xsl:for-each>
		</Facility>
	</xsl:template>
</xsl:stylesheet>
